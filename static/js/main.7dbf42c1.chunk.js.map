{"version":3,"sources":["actions/actionTypes.js","actions/actions.js","constants.js","utils.js","components/FutureSnapshot.js","components/highlight-cards/AirPressure.js","components/highlight-cards/Gauge.js","components/highlight-cards/Humidity.js","components/highlight-cards/Visibility.js","components/highlight-cards/WindStatus.js","components/Forecast.js","components/TabBar.js","components/Container.js","App.js","services.js","sagas.js","reducer.js","index.js"],"names":["FETCH_SEARCH_OPTIONS","FETCH_WEATHER_FOR_WOEID","FETCH_SEARCH_OPTIONS_READY","FETCH_SEARCH_OPTIONS_IN_PROGRESS","FETCH_SEARCH_OPTIONS_SUCCESS","FETCH_SEARCH_OPTIONS_FAILURE","FETCH_WEATHER_FOR_WOEID_READY","FETCH_WEATHER_FOR_WOEID_IN_PROGRESS","FETCH_WEATHER_FOR_WOEID_SUCCESS","FETCH_WEATHER_FOR_WOEID_FAILURE","UNIT_TOGGLE","RESET_WEATHER_DATA_AND_STATUS","fetchWeather","woeid","type","fetchSearchOptions","search","onUnitClick","unit","resetWeatherDataAndStatus","UNIT","weekdays","months","getReadableDate","date","newDate","Date","getDay","getDate","getMonth","getWeatherImage","icon","formattedData","data","consolidated_weather","title","todayRelevantData","created","max_temp","min_temp","predictability","readableDate","applicable_date","wind_direction","Math","round","wind_speed","toPrecision","visibility","the_temp","shift","futureData","map","day","idx","weather_state_abbr","cToF","temp","fToC","toggleUnitOfTemperature","weather","forEach","arr","getUnitAscii","Snapshot","className","src","alt","AirPressure","pressure","Gauge","value","style","width","Humidity","humidity","Visibility","WindStatus","speed","direction","compass","fontSize","transform","connect","state","fetchWeatherStatus","dispatch","bindActionCreators","air_pressure","wind_direction_compass","handleOnUnitClick","event","id","target","CircularProgress","size","length","display","marginRight","name","checked","onClick","class","for","each","getBody","searchOptions","fetchSearchOptionsStatus","useState","setSearch","cities","setCities","handleChange","handleOptionClick","textContent","findIndex","city","parseInt","handleCityClick","getSearchBody","option","placeholder","onChange","weather_state_name","Container","App","BASE_URL","query","axios","get","then","response","error","getSearchOptions","getWeather","rootSaga","action","put","coordinates","split","Number","isNaN","parseFloat","call","results","pick","takeLatest","initialState","appReducer","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","logger","createLogger","level","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7dbf42c1.chunk.js","sourcesContent":["export const FETCH_SEARCH_OPTIONS = 'FETCH_SEARCH_OPTIONS';\nexport const FETCH_WEATHER_FOR_WOEID = 'FETCH_WEATHER_FOR_WOEID';\n\nexport const FETCH_SEARCH_OPTIONS_READY = 'FETCH_SEARCH_OPTIONS_READY';\nexport const FETCH_SEARCH_OPTIONS_IN_PROGRESS = 'FETCH_SEARCH_OPTIONS_IN_PROGRESS';\nexport const FETCH_SEARCH_OPTIONS_SUCCESS = 'FETCH_SEARCH_OPTIONS_SUCCESS';\nexport const FETCH_SEARCH_OPTIONS_FAILURE = 'FETCH_SEARCH_OPTIONS_FAILURE';\n\nexport const FETCH_WEATHER_FOR_WOEID_READY = 'FETCH_WEATHER_FOR_WOEID_READY';\nexport const FETCH_WEATHER_FOR_WOEID_IN_PROGRESS = 'FETCH_WEATHER_FOR_WOEID_IN_PROGRESS';\nexport const FETCH_WEATHER_FOR_WOEID_SUCCESS = 'FETCH_WEATHER_FOR_WOEID_SUCCESS';\nexport const FETCH_WEATHER_FOR_WOEID_FAILURE = 'FETCH_WEATHER_FOR_WOEID_FAILURE';\n\nexport const UNIT_TOGGLE = 'UNIT_TOGGLE';\nexport const RESET_WEATHER_DATA_AND_STATUS = 'RESET_WEATHER_DATA_AND_STATUS';\n","import { FETCH_SEARCH_OPTIONS, FETCH_WEATHER_FOR_WOEID, UNIT_TOGGLE, RESET_WEATHER_DATA_AND_STATUS } from \"./actionTypes\";\n\nexport const fetchWeather = woeid => ({\n  type: FETCH_WEATHER_FOR_WOEID,\n  woeid,\n});\n\nexport const fetchSearchOptions = search => ({\n  type: FETCH_SEARCH_OPTIONS,\n  search,\n});\n\nexport const onUnitClick = unit => {\n  return { type: UNIT_TOGGLE, unit }\n};\n\nexport const resetWeatherDataAndStatus = () => ({\n  type: RESET_WEATHER_DATA_AND_STATUS,\n})\n","export const UNIT = {\n  CELCIUS: 'CELCIUS',\n  FAHRENHEIT: 'FAHRENHEIT',\n};\n","import { useRef, useEffect } from 'react';\nimport { isEqual } from 'lodash';\nimport { UNIT } from './constants';\n\nconst weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'];\nconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nconst getReadableDate = date => {\n  const newDate = new Date(date);\n  return `${weekdays[newDate.getDay()]}, ${newDate.getDate()} ${months[newDate.getMonth()]}`;\n}\n\nexport const getWeatherImage = icon => `https://www.metaweather.com/static/img/weather/${icon}.svg`;\n\nexport const formattedData = data => {\n  const { consolidated_weather, title } = data;\n  const { \n    created,\n    max_temp,\n    min_temp,\n    predictability,\n    ...todayRelevantData\n  } = consolidated_weather[0];\n\n  // format today's data\n  todayRelevantData.readableDate = getReadableDate(todayRelevantData.applicable_date);\n  todayRelevantData.wind_direction = Math.round(todayRelevantData.wind_direction);\n  todayRelevantData.wind_speed = todayRelevantData.wind_speed.toPrecision(2);\n  todayRelevantData.visibility = Math.round(todayRelevantData.visibility);\n  todayRelevantData.the_temp = Math.round(todayRelevantData.the_temp);\n\n  consolidated_weather.shift();\n\n  const futureData = consolidated_weather.map((day, idx) => {\n\n    return {\n      min_temp: Math.round(day.min_temp),\n      max_temp: Math.round(day.max_temp),\n      readableDate: idx ? getReadableDate(day.applicable_date) : 'Tomorrow',\n      weather_state_abbr: day.weather_state_abbr,\n    }\n  });\n\n  return { futureData, todayRelevantData, unit: UNIT.CELCIUS, title };\n};\n\nconst cToF = temp => Math.round((temp * (9 / 5)) + 32);\nconst fToC = temp => Math.round((temp - 32) * (5 / 9));\n\nexport const toggleUnitOfTemperature = (unit, weather) => {\n  const { futureData, todayRelevantData } = weather;\n\n  if (!futureData || !todayRelevantData) {\n    return weather;\n  }\n\n  todayRelevantData.the_temp = unit === UNIT.FAHRENHEIT ? cToF(todayRelevantData.the_temp) : fToC(todayRelevantData.the_temp);\n\n  futureData.forEach(arr => {\n    arr.min_temp = unit === UNIT.FAHRENHEIT ? cToF(arr.min_temp) : fToC(arr.min_temp);\n    arr.max_temp = unit === UNIT.FAHRENHEIT ? cToF(arr.max_temp) : fToC(arr.max_temp);\n  });\n\n  return { ...weather, futureData, todayRelevantData, unit };\n}\n\nexport function useDeepEffect(effectFunc, deps) {\n  const isFirst = useRef(true);\n  const prevDeps = useRef(deps);\n\n  useEffect(() => {\n    const isSame = prevDeps.current.every((obj, idx) => isEqual(obj, deps[idx]));\n    if (isFirst || !isSame) {\n      effectFunc();\n    }\n\n    isFirst.current = false;\n    prevDeps.current = deps;\n  }, deps)\n}\n\nexport const getUnitAscii = unit => unit === UNIT.CELCIUS? \"\\u2103\" : \"\\u2109\";\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getWeatherImage, getUnitAscii } from '../utils';\nimport { UNIT } from '../constants';\nimport './FutureSnapshot.css';\n\nconst propTypes = {\n  data: PropTypes.shape({\n    min_temp: PropTypes.number.isRequired,\n    max_temp: PropTypes.number.isRequired,\n    weather_state_abbr: PropTypes.string.isRequired,\n    readableDate: PropTypes.string.isRequired,\n  }).isRequired,\n  unit: PropTypes.oneOf(Object.values(UNIT)).isRequired,\n};\n\nconst Snapshot = ({ data, unit }) => {\n  return (\n    <div className=\"snapshot\">\n      <p className=\"future-date\">{data.readableDate}</p>\n      <img src={getWeatherImage(data.weather_state_abbr)} alt=\"pic\" className=\"weather-image\"/>\n      <div className=\"temperatures\">\n        <p className=\"max-temp\">{`${data.max_temp}${getUnitAscii(unit)}`}</p>\n        <p className=\"min-temp\">{`${data.min_temp}${getUnitAscii(unit)}`}</p>\n      </div>\n    </div>\n  )\n};\n\nSnapshot.propTypes = propTypes;\n\nexport default Snapshot;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './common.css';\n\nconst propTypes = {\n  pressure: PropTypes.number.isRequired,\n};\n\nconst AirPressure = ({ pressure }) => {\n  \n  return (\n    <div className=\"card\">\n      <p className=\"title\">Air Pressure</p>\n      <div className=\"inline-data\">\n        <p className=\"pressure\">{pressure} </p>\n        <p className=\"unit\">mb</p>\n      </div>\n    </div>\n  )\n};\n\nAirPressure.propTypes = propTypes;\n\nexport default AirPressure;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Gauge.css';\n\nconst propTypes = {\n  value: PropTypes.number.isRequired,\n};\n\nconst Gauge = ({ value }) => {\n\n  const getPercentage = () => (value * 229) / 100;\n\n  return (\n    <div className=\"guage\">\n      <div className=\"numbers\">\n        <p className=\"reading\">0%</p>\n        <p className=\"reading\">50%</p>\n        <p className=\"reading\">100%</p>\n      </div>\n      <div className=\"filler-guage\"></div>\n      <div className=\"filled\" style={{ width: `${getPercentage()}px`}}></div>\n    </div>\n  )\n};\n\nGauge.propTypes = propTypes;\n\nexport default Gauge;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Gauge from './Gauge';\nimport './common.css';\n\nconst propTypes = {\n  humidity: PropTypes.number.isRequired,\n};\n\nconst Humidity = ({ humidity }) => {\n  \n  return (\n    <div className=\"card\">\n      <p className=\"title\">Humidity</p>\n      <div className=\"inline-data\">\n        <p className=\"humidity\">{humidity}</p>\n        <p className=\"unit\">%</p>\n      </div>\n      <Gauge value={humidity} />\n    </div>\n  )\n};\n\nHumidity.propTypes = propTypes;\n\nexport default Humidity;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './common.css';\n\nconst propTypes = {\n  visibility: PropTypes.number.isRequired,\n};\n\nconst Visibility = ({ visibility }) => {\n  \n  return (\n    <div className=\"card\">\n      <p className=\"title\">Visibility</p>\n      <div className=\"inline-data\">\n        <p className=\"visibility\">{visibility} </p>\n        <p className=\"unit\">miles</p>\n      </div>\n    </div>\n  )\n};\n\nVisibility.propTypes = propTypes;\n\nexport default Visibility;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './common.css';\nimport NavigationIcon from '@material-ui/icons/Navigation';\n\n\nconst propTypes = {\n  speed: PropTypes.number.isRequired,\n  direction: PropTypes.string.isRequired,\n  compass: PropTypes.number.isRequired,\n};\n\nconst WindStatus = ({ speed, direction, compass }) => {\n  \n  return (\n    <div className=\"card\">\n      <p className=\"title\">Wind status</p>\n      <div className=\"inline-data\">\n        <p className=\"speed\">{speed} </p>\n        <p className=\"unit\">mph</p>\n      </div>\n      \n      <div className=\"inline-data\">\n        <NavigationIcon className=\"compass\" fontSize=\"large\" style={{ transform: `rotate(${direction}deg)` }} />\n        <p className=\"direction\">{compass}</p>\n      </div>\n    </div>\n  )\n};\n\nWindStatus.propTypes = propTypes;\n\nexport default WindStatus;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {\n  onUnitClick,\n} from '../actions/actions';\nimport {\n  FETCH_WEATHER_FOR_WOEID_READY,\n  FETCH_WEATHER_FOR_WOEID_IN_PROGRESS,\n  FETCH_WEATHER_FOR_WOEID_SUCCESS,\n  FETCH_WEATHER_FOR_WOEID_FAILURE,\n} from '../actions/actionTypes';\nimport './Forecast.css';\nimport FutureSnapshot from './FutureSnapshot';\nimport AirPressure from './highlight-cards/AirPressure';\nimport Humidity from './highlight-cards/Humidity';\nimport Visibility from './highlight-cards/Visibility';\nimport WindStatus from './highlight-cards/WindStatus';\nimport { UNIT } from '../constants';\n\n\nconst propTypes = {\n  weather: PropTypes.shape({\n    futureData: PropTypes.arrayOf(PropTypes.shape({\n      min_temp: PropTypes.number.isRequired,\n      max_temp: PropTypes.number.isRequired,\n      weather_state_abbr: PropTypes.string.isRequired,\n      readableDate: PropTypes.string.isRequired,\n    })),\n    todayRelevantData: PropTypes.shape({\n      air_pressure: PropTypes.number.isRequired,\n      humidity: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      the_temp: PropTypes.number.isRequired,\n      visibility: PropTypes.number.isRequired,\n      weather_state_abbr: PropTypes.string.isRequired,\n      weather_state_name: PropTypes.string.isRequired,\n      wind_direction: PropTypes.number.isRequired,\n      wind_direction_compass: PropTypes.string.isRequired,\n      wind_speed: PropTypes.number.isRequired,\n      readableDate: PropTypes.string.isRequired,\n    }),\n    unit: PropTypes.oneOf(Object.values(UNIT)),\n    title: PropTypes.string,\n  }).isRequired,\n  fetchWeatherStatus: PropTypes.string.isRequired,\n  onUnitClick: PropTypes.func.isRequired,\n};\n\nconst Forecast = ({\n  weather,\n  fetchWeatherStatus,\n  onUnitClick,\n}) => {\n  const { futureData, todayRelevantData, unit } = weather;\n  if (todayRelevantData) {\n    var { air_pressure, humidity, visibility, wind_direction, wind_direction_compass, wind_speed } = todayRelevantData;\n  }\n\n  const getBody = () => {\n    switch(fetchWeatherStatus) {\n      case FETCH_WEATHER_FOR_WOEID_IN_PROGRESS:\n        return <CircularProgress className=\"wait-spinner\" size={50} />\n      case FETCH_WEATHER_FOR_WOEID_READY:\n        return <p className=\"default-screen\">Welcome to the Weather app. Please search and select a city to see its weather forecast.</p>;\n      case FETCH_WEATHER_FOR_WOEID_SUCCESS:\n        return futureData && futureData.length && todayRelevantData && <div>\n                <div className=\"unit-toggle\">\n                  <div style={{ display: 'inline-block', marginRight: '20px' }}>\n                    <input type=\"radio\" name=\"toggle-group\" value=\"1\" id={UNIT.CELCIUS} checked=\"checked\" onClick={handleOnUnitClick} />\n                    <label class=\"radio\" for={UNIT.CELCIUS}>&#8451;</label>\n                  </div>\n                  <div style={{ display: 'inline-block' }}>\n                    <input type=\"radio\" name=\"toggle-group\" value=\"2\" id={UNIT.FAHRENHEIT} onClick={handleOnUnitClick} />\n                    <label class=\"radio\" for={UNIT.FAHRENHEIT}>&#8457;</label>\n                  </div>\n                </div>\n                <div className=\"future\">\n                  {futureData && futureData.map(each => <FutureSnapshot data={each} unit={unit} />)}\n                </div>\n                <h2 className=\"heading\">Today's Highlights</h2>\n                <div className=\"highlights\">\n                  <AirPressure pressure={air_pressure} />\n                  <Humidity humidity={humidity} />\n                  <Visibility visibility={visibility} />\n                  <WindStatus speed={wind_speed} direction={wind_direction} compass={wind_direction_compass} />\n                </div>\n              </div>;\n      case FETCH_WEATHER_FOR_WOEID_FAILURE:\n        return <p className=\"default-screen\">Failed to retrieve weather data.</p>\n      default:\n        break;\n    }\n  };\n\n  const handleOnUnitClick = event => {\n    const { id } = event.target;\n    if (id !== unit) {\n      onUnitClick(id);\n    }\n  };\n\n  return (\n    <div className=\"forecast\">\n      {getBody()}\n    </div>\n  );\n};\n\nForecast.propTypes = propTypes;\n\nconst mapStateToProps = state => ({\n  weather: state.weather,\n  fetchWeatherStatus: state.fetchWeatherStatus,\n});\n\n\nconst mapDispatchToProps = dispatch => \n  bindActionCreators({\n    onUnitClick,\n  }, dispatch);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Forecast);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {\n  fetchSearchOptions, fetchWeather, resetWeatherDataAndStatus\n} from '../actions/actions';\nimport {\n  FETCH_WEATHER_FOR_WOEID_READY,\n  FETCH_WEATHER_FOR_WOEID_IN_PROGRESS,\n  FETCH_WEATHER_FOR_WOEID_SUCCESS,\n  FETCH_WEATHER_FOR_WOEID_FAILURE,\n  FETCH_SEARCH_OPTIONS_READY,\n  FETCH_SEARCH_OPTIONS_IN_PROGRESS,\n  FETCH_SEARCH_OPTIONS_SUCCESS,\n  FETCH_SEARCH_OPTIONS_FAILURE,\n} from '../actions/actionTypes';\nimport './TabBar.css';\nimport { Fragment } from 'react';\nimport { getUnitAscii, getWeatherImage } from '../utils';\n\n\nconst propTypes = {\n  searchOptions: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    woeid: PropTypes.number.isRequired,\n  })).isRequired,\n  fetchSearchOptionsStatus: PropTypes.string.isRequired,\n  fetchSearchOptions: PropTypes.func.isRequired,\n  fetchWeather: PropTypes.func.isRequired,\n  weather: PropTypes.shape({\n    futureData: PropTypes.arrayOf(PropTypes.shape({\n      min_temp: PropTypes.number.isRequired,\n      max_temp: PropTypes.number.isRequired,\n      weather_state_abbr: PropTypes.string.isRequired,\n      readableDate: PropTypes.string.isRequired,\n    })),\n    todayRelevantData: PropTypes.shape({\n      air_pressure: PropTypes.number.isRequired,\n      humidity: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      the_temp: PropTypes.number.isRequired,\n      visibility: PropTypes.number.isRequired,\n      weather_state_abbr: PropTypes.string.isRequired,\n      weather_state_name: PropTypes.string.isRequired,\n      wind_direction: PropTypes.number.isRequired,\n      wind_direction_compass: PropTypes.string.isRequired,\n      wind_speed: PropTypes.number.isRequired,\n      readableDate: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n  fetchWeatherStatus: PropTypes.string.isRequired,\n  resetWeatherDataAndStatus: PropTypes.func.isRequired,\n};\n\nconst TabBar = ({\n  searchOptions,\n  fetchSearchOptions,\n  fetchSearchOptionsStatus,\n  fetchWeather,\n  weather,\n  fetchWeatherStatus,\n  resetWeatherDataAndStatus,\n}) => {\n  const [search, setSearch] = useState('');\n  const [cities, setCities] = useState([]);\n\n  const handleChange = event => {\n    setSearch(event.target.value);\n  };\n\n  const handleOptionClick = event => {\n    const { id, textContent } = event.target;\n    if (cities.findIndex(city => city.woeid == id) === -1) {\n      setCities([...cities, { title: textContent, woeid: parseInt(id, 10) }]);\n    }\n  };\n\n  const handleCityClick = event => {\n    fetchWeather(parseInt(event.target.id, 10));\n  };\n\n  const getSearchBody = () => {\n    switch(fetchSearchOptionsStatus) {\n      case FETCH_SEARCH_OPTIONS_READY:\n        return <p>Enter name of city or co-ordinates</p>\n      case FETCH_SEARCH_OPTIONS_IN_PROGRESS:\n        return <CircularProgress className=\"wait-spinner\" size={25} />\n      case FETCH_SEARCH_OPTIONS_SUCCESS:\n        return searchOptions && searchOptions.length && \n          <ol className=\"city-list\">\n            {searchOptions.map(option => <li id={option.woeid} onClick={handleOptionClick}>{option.title}</li>)}\n          </ol>\n      case FETCH_SEARCH_OPTIONS_FAILURE:\n        return <p>Failed to retrieve search options</p>\n      default:\n        break;\n    }\n  };\n\n  const getBody = () => {\n    switch(fetchWeatherStatus) {\n      case FETCH_WEATHER_FOR_WOEID_IN_PROGRESS:\n        return <CircularProgress className=\"wait-spinner\" size={50} />;\n      case FETCH_WEATHER_FOR_WOEID_READY:\n        return <Fragment>\n          <div className=\"search\">\n            <div>          \n              <input placeholder=\"search location\" onChange={handleChange} value={search}/>\n                <div className=\"popover\">\n                  {getSearchBody()}\n                </div>\n            </div>\n            <button className=\"search-btn\" onClick={() => fetchSearchOptions(search)}>\n              Search\n            </button>\n          </div>\n\n          <div className=\"cities\">\n              {cities.map(city => \n                <button id={city.woeid} className=\"city\" onClick={handleCityClick}>\n                  {city.title}\n                </button>\n              )}\n          </div>\n        </Fragment>;\n      case FETCH_WEATHER_FOR_WOEID_SUCCESS:\n        return <div className=\"today-weather\">\n                <button class=\"go-back-btn\" onClick={() => resetWeatherDataAndStatus()}>Go back</button>\n                <img src={getWeatherImage(weather.todayRelevantData.weather_state_abbr)} alt=\"pic\" className=\"today-weather-image\"/>\n                <div className=\"today-inline-data\">\n                  <p className=\"today-temp\">{weather.todayRelevantData.the_temp}</p>\n                  <p className=\"today-unit\">{getUnitAscii(weather.unit)}</p>\n                </div>\n                <p className=\"today-weather-state\">{weather.todayRelevantData.weather_state_name}</p>\n                <div className=\"footer-text\">\n                  <p style={{ marginRight: '5px' }}>Today</p>\n                  <p style={{ marginRight: '5px' }}>.</p>\n                  <p>{weather.todayRelevantData.readableDate}</p>\n                </div>\n                <div className=\"footer-text\">\n                  <p>{weather.title}</p>\n                </div>\n              </div>;\n      case FETCH_WEATHER_FOR_WOEID_FAILURE:\n        return <p className=\"default-screen\">Failed to retrieve weather data.</p>\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"tabBar\">\n      {getBody()}\n    </div>\n  );\n};\n\nTabBar.propTypes = propTypes;\n\nconst mapDispatchToProps = dispatch => \n  bindActionCreators({\n    fetchSearchOptions,\n    fetchWeather,\n    resetWeatherDataAndStatus,\n  }, dispatch);\n\nconst mapStateToProps = state => ({\n  searchOptions: state.searchOptions,\n  fetchSearchOptionsStatus: state.fetchSearchOptionsStatus,\n  fetchWeatherStatus: state.fetchWeatherStatus,\n  weather: state.weather,\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TabBar);\n","import React from 'react';\nimport Forecast from './Forecast';\nimport TabBar from './TabBar';\nimport './Container.css';\n\nconst Container = () => {\n  return (\n    <div className=\"outerDiv\">\n      <TabBar />\n      <Forecast />\n    </div>\n  );\n};\n\nexport default Container;\n","import Container from \"./components/Container\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","import axios from \"axios\";\n\nconst BASE_URL =\n  \"https://guarded-hamlet-95273.herokuapp.com/https://www.metaweather.com/api/location\";\n\nexport const fetchSearchOptions = (query) => {\n  return axios\n    .get(`${BASE_URL}/search/?${query}`)\n    .then((response) => response)\n    .then((error) => error);\n};\n\nexport const fetchWeather = (woeid) => {\n  return axios\n    .get(`${BASE_URL}/${woeid}`)\n    .then((response) => response)\n    .then((error) => error);\n};\n","import { put, call, takeLatest } from 'redux-saga/effects';\nimport pick from 'lodash/pick';\nimport {\n  FETCH_SEARCH_OPTIONS,\n  FETCH_WEATHER_FOR_WOEID,\n  FETCH_SEARCH_OPTIONS_SUCCESS,\n  FETCH_SEARCH_OPTIONS_FAILURE,\n  FETCH_WEATHER_FOR_WOEID_SUCCESS,\n  FETCH_WEATHER_FOR_WOEID_FAILURE,\n  FETCH_SEARCH_OPTIONS_IN_PROGRESS,\n  FETCH_WEATHER_FOR_WOEID_IN_PROGRESS,\n} from './actions/actionTypes';\nimport {\n  fetchSearchOptions,\n  fetchWeather,\n} from './services';\nimport { formattedData } from './utils';\n\n\nfunction* getSearchOptions(action) {\n  const { search } = action;\n  yield put({ type: FETCH_SEARCH_OPTIONS_IN_PROGRESS });\n  try {\n    if (search && search.length) {\n      const coordinates = search.split(',');\n      let data;\n      if (coordinates.length === 2 \n            && !Number.isNaN(parseFloat(coordinates[0]))\n            && !Number.isNaN(parseFloat(coordinates[1]))) {\n        data = yield call(fetchSearchOptions, `lattlong=${search}`);\n      } else {\n        data = yield call(fetchSearchOptions, `query=${search}`);\n      }\n      const results = data.data.map(each => pick(each, 'title', 'woeid'));\n      yield put({ type: FETCH_SEARCH_OPTIONS_SUCCESS, results });\n    } else {\n      yield put({ type: FETCH_SEARCH_OPTIONS_FAILURE, error: 'search cannot be an empty string' });\n    }\n  } catch (error) {\n    yield put({ type: FETCH_SEARCH_OPTIONS_FAILURE, error });\n  }\n};\n\nfunction* getWeather(action) {\n  const { woeid } = action;\n  yield put({ type: FETCH_WEATHER_FOR_WOEID_IN_PROGRESS });\n  try {\n    if (woeid && typeof woeid === 'number') {\n      const { data } = yield call(fetchWeather, woeid);\n      yield put({ type: FETCH_WEATHER_FOR_WOEID_SUCCESS, data: formattedData(data) });\n    } else {\n      yield put({ type: FETCH_WEATHER_FOR_WOEID_FAILURE, error: 'woeid must be a number' });\n    }\n  } catch (error) {\n    yield put({ type: FETCH_WEATHER_FOR_WOEID_FAILURE, error });\n  }\n};\n\nexport default function* rootSaga() {\n  yield takeLatest(FETCH_SEARCH_OPTIONS, getSearchOptions);\n  yield takeLatest(FETCH_WEATHER_FOR_WOEID, getWeather);\n};\n","import {\n  FETCH_SEARCH_OPTIONS_READY,\n  FETCH_SEARCH_OPTIONS_IN_PROGRESS,\n  FETCH_SEARCH_OPTIONS_SUCCESS,\n  FETCH_SEARCH_OPTIONS_FAILURE,\n\n  FETCH_WEATHER_FOR_WOEID_READY,\n  FETCH_WEATHER_FOR_WOEID_IN_PROGRESS,\n  FETCH_WEATHER_FOR_WOEID_SUCCESS,\n  FETCH_WEATHER_FOR_WOEID_FAILURE,\n\n  UNIT_TOGGLE,\n  RESET_WEATHER_DATA_AND_STATUS,\n} from './actions/actionTypes';\n\nimport {\n  toggleUnitOfTemperature\n} from './utils';\n\n\nconst initialState = {\n  fetchSearchOptionsStatus: FETCH_SEARCH_OPTIONS_READY,\n  fetchWeatherStatus: FETCH_WEATHER_FOR_WOEID_READY,\n  weather: {},\n  searchOptions: [],\n};\n\nconst appReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case FETCH_SEARCH_OPTIONS_IN_PROGRESS:\n      return { ...state, fetchSearchOptionsStatus: FETCH_SEARCH_OPTIONS_IN_PROGRESS };\n    case FETCH_SEARCH_OPTIONS_SUCCESS:\n      return { ...state, searchOptions: action.results, fetchSearchOptionsStatus: FETCH_SEARCH_OPTIONS_SUCCESS };\n    case FETCH_SEARCH_OPTIONS_FAILURE:\n      return { ...state, searchOptions: [action.error], fetchSearchOptionsStatus: FETCH_SEARCH_OPTIONS_FAILURE };\n    \n    case FETCH_WEATHER_FOR_WOEID_IN_PROGRESS:\n      return { ...state, fetchWeatherStatus: FETCH_WEATHER_FOR_WOEID_IN_PROGRESS };\n    case FETCH_WEATHER_FOR_WOEID_SUCCESS:\n      return { ...state, weather: action.data, fetchWeatherStatus: FETCH_WEATHER_FOR_WOEID_SUCCESS };\n    case FETCH_WEATHER_FOR_WOEID_FAILURE:\n      return { ...state, weather: [action.error], fetchWeatherStatus: FETCH_WEATHER_FOR_WOEID_FAILURE };\n    \n    case UNIT_TOGGLE:\n      return { ...state, weather: toggleUnitOfTemperature(action.unit, state.weather) };\n    case RESET_WEATHER_DATA_AND_STATUS:\n      return { ...state, fetchWeatherStatus: FETCH_WEATHER_FOR_WOEID_READY, weather: initialState.weather }\n    default:\n      return state;\n  }\n};\n\nexport default appReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport createSagaMiddleware from 'redux-saga';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport App from './App';\nimport rootSaga from './sagas';\nimport appReducer from './reducer';\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst sagaMiddleware = createSagaMiddleware();\nconst logger = createLogger({ level: 'info' });\nconst store = createStore(appReducer, composeEnhancer(applyMiddleware(sagaMiddleware), applyMiddleware(logger)));\nsagaMiddleware.run(rootSaga);\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}